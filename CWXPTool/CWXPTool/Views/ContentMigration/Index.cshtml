@model CWXPMigration.Models.ContentMigrationModel

<form method="post">
    <div class="container py-5">
        <h2 class="text-center mb-5 fw-bold">Children's Content Migration Tool</h2>

        <div class="row">
            <div class="col-md-8">
                <!-- GLOBAL ITEM PATHS -->
                <div class="card mb-4 p-3 border-0 shadow-sm">
                    <div class="mb-3">
                        <label for="itemPath" class="form-label fw-semibold">XP Item Path *</label>
                        <input type="text" id="itemPath" name="itemPath" value="@Model.ItemPath" class="form-control" placeholder="/sitecore/content/..." required />
                    </div>
                    <div class="mb-3">
                        <label for="xmcItemPath" class="form-label fw-semibold">XMC Item Path (optional)</label>
                        <input type="text" id="xmcItemPath" name="xmcItemPath" value="@Model.XMCItemPath" class="form-control" placeholder="/sitecore/content/..." />
                    </div>
                </div>

                <div class="accordion" id="migrationAccordion">
                    <!-- MIGRATION OPTIONS -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOptions">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOptions" aria-expanded="true" aria-controls="collapseOptions">
                                Migration Options
                            </button>
                        </h2>
                        <div id="collapseOptions" class="accordion-collapse collapse show" aria-labelledby="headingOptions" data-bs-parent="#migrationAccordion">
                            <div class="accordion-body">
                                <!-- Language -->
                                <div class="mt-4">
                                    <label for="language" class="form-label fw-semibold">Language</label>
                                    <select id="language" name="language" class="form-select">
                                        <option value="en" selected>English</option>
                                        <option value="es-ES">Spanish</option>
                                    </select>
                                </div>

                                <!-- Workflow State -->
                                <div class="mt-4">
                                    <label for="workflowState" class="form-label fw-semibold">Workflow State</label>
                                    <select id="workflowState" name="workflowState" class="form-select">
                                        <option value="Draft" selected>Draft</option>
                                        <option value="Approved">Approved</option>
                                    </select>
                                </div>

                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" id="createPages" name="createPages">
                                    <label class="form-check-label fw-semibold" for="createPages">Create Pages During Sync</label>
                                </div>
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" id="syncComponents" name="syncComponents">
                                    <label class="form-check-label fw-semibold" for="syncComponents">Sync Components</label>
                                </div>

                                <!-- Grouped: Global Datasources & Datasource For -->
                                <div class="border rounded p-3 mt-4">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="syncGlobalDatasources" name="syncGlobalDatasources">
                                        <label class="form-check-label fw-semibold" for="syncGlobalDatasources">Sync Datasources</label>
                                    </div>
                                    <div class="mt-2">
                                        <label for="datasourceType" class="form-label fw-semibold">Datasource Type</label>
                                        <select id="datasourceType" name="datasourceType" class="form-select">
                                            <option value="Blogs" selected>Blogs</option>
                                            <option value="Providers">Providers</option>
                                            <option value="Metadata">Metadata</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- TEMPLATE MIGRATION -->
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTemplate">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTemplate" aria-expanded="false" aria-controls="collapseTemplate">
                                Content Migration with Templates & Field Mapping
                            </button>
                        </h2>
                        <div id="collapseTemplate" class="accordion-collapse collapse" aria-labelledby="headingTemplate" data-bs-parent="#migrationAccordion">
                            <div class="accordion-body">
                                <div id="templateButtonContainer" class="mb-4">
                                    <div class="d-grid gap-2">
                                        <button type="button" class="btn btn-outline-primary" id="getFieldsBtn">Get Templates</button>
                                    </div>
                                </div>

                                <div id="templateSelectorContainer" style="display:none" class="mb-4">
                                    <label for="templateSelector" class="form-label">Select Templates</label>
                                    <select id="templateSelector" class="form-control" multiple></select>
                                </div>

                                <div id="templateFieldsContainer" class="mb-4"></div>
                                <input type="hidden" id="mappingSelections" name="mappingSelections" />
                            </div>
                        </div>
                    </div>

                    <!-- ENVIRONMENT & SUBMIT -->
                    <div class="card mt-4 p-4 shadow-sm border-0">
                        <div class="mb-3">
                            <label for="environment" class="form-label fw-semibold">XM Cloud Environment *</label>
                            <select id="environment" name="environment" class="form-select" required>
                                <option value="DEV" @(Model.Environment == "DEV" ? "selected" : "")>DEV</option>
                                <option value="UAT" @(Model.Environment == "UAT" ? "selected" : "")>UAT</option>
                                <option value="PROD" @(Model.Environment == "PROD" ? "selected" : "")>PROD</option>
                            </select>
                        </div>

                        <div class="d-grid">
                            <button type="submit" id="startSyncBtn" class="btn btn-success">
                                <span id="syncBtnText">Start Sync</span>
                                <span id="syncSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                            </button>
                        </div>

                        <div id="syncResultContainer" class="mt-4"></div>
                    </div>
                </div>
            </div>

            <!-- SIDE IMAGE COLUMN -->
            <div class="col-md-4 d-none d-md-block">
                <img src="https://cdn-icons-png.flaticon.com/512/3262/3262047.png" alt="CMS Icon" class="img-fluid mt-4 animate__animated animate__fadeInRight" />
            </div>
        </div>
    </div>
</form>

<!-- Styling and Animation -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
<style>
    body {
        background: linear-gradient(to right, #e3f2fd, #ffffff);
    }

    h2 {
        font-size: 2.25rem;
        color: #343a40;
    }

    .accordion-button {
        font-weight: 600;
        background-color: #f8f9fa;
    }

    .accordion-item {
        border: none;
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .accordion-body {
        background: #fff;
        border: 1px solid #e0e0e0;
        border-top: none;
        padding: 1.5rem;
    }

    /* Bigger checkboxes for XP mapping UI only */
    #templateFieldsContainer input[type="checkbox"],
    #templateFieldsContainer .select-all-fields {
        transform: scale(1.4);
        margin: 3px;
    }
</style>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
   $(document).ready(function () {

    let templateMap = {};
    let templateFieldsMap = {};
       const locationFields = [
           "acceptingNewPatients",
           "address1",
           "address2",
           "addressMapURL",
           "alternateCity",
           "city",
           "content",
           "displayOpenScheduling",
           "displayPhysiciansAtThisLocation",
           "emailAddress",
           "epicDeptID",
           "Latitude",
           "locationID",
           "locationName",
           "Longitude",
           "mobileVisiblePhoneNumber",
           "npiNumber",
           "openScheduleIntro",
           "photo",
           "ratingAndReviewDataId",
           "showInLocationListings",
           "specialties",
           "website",
           "zip"
       ];

    let xmcTemplates = [
        {
            id: "{6DE30456-2D7D-4D28-BF1B-2B2B8AA42E62}", name: "Provider Profile", fields: [
                "acceptingNewPatients",
                "additionalDegreeTitles",
                "awards",
                "certifications",
                "degreeTitles",
                "displayInPhysicianListing",
                "epicPhysicianID",
                "firstName",
                "gender",
                "lastName",
                "locations",
                "middleName",
                "npi",
                "phone",
                "photo",
                "positionTitles",
                "providerID",
                "publications",
                "specialties",
                "Title",
                "videoID"
            ]
 },
        { id: "{BB35FDA8-7E1F-48DC-A556-FA8FD89F96C2}", name: "Specialty Care", fields: locationFields },
        { id: "{6274DC7B-91E7-4243-B5DA-96604F2EBBEA}", name: "Primary Care", fields: locationFields },
        { id: "{7A4E0C65-C397-4E65-A941-7CF879C0B727}", name: "Urgent Care", fields: locationFields },
        { id: "{FBAA34FA-9D09-4724-9C0B-F7F0860B35A8}", name: "Mental Health", fields: locationFields },
        { id: "{CE453EDE-ED09-4928-80B0-143556AA52E8}", name: "Hospital", fields: locationFields },
        { id: "{1B371DE2-704C-4D43-A94B-FC04B95DC6B8}", name: "Location Page", fields: locationFields },
        { id: "{C8749C06-CA6C-4630-83E0-EA1A9A973907}", name: "General Page T1", fields: [] },
        {
            id: "{2400C94A-5BB1-4F69-85CC-3AD185DC4BCA}", name: "General Page T2", fields: ["Title", "Description", "content" ]
        },
        { id: "{39EBED3F-5965-4A68-9A4C-45E7D29043C8}", name: "TeachingSheets", fields: [] }
       ];

       function handleSyncOptionLogic() {
           const isGlobalChecked = $('#syncGlobalDatasources').is(':checked');
           const isCreateChecked = $('#createPages').is(':checked');
           const isSyncChecked = $('#syncComponents').is(':checked');

           if (isGlobalChecked) {
               $('#createPages, #syncComponents').prop('checked', false).prop('disabled', true);
               $('#getFieldsBtn').prop('disabled', true);
           } else {
               $('#createPages, #syncComponents').prop('disabled', false);
               $('#getFieldsBtn').prop('disabled', false);
           }

           if (isCreateChecked || isSyncChecked) {
               $('#syncGlobalDatasources').prop('checked', false).prop('disabled', true);
               $('#datasourceType').prop('disabled', true);
           } else {
               $('#syncGlobalDatasources').prop('disabled', false);
               $('#datasourceType').prop('disabled', false);
           }
       }

       $('#createPages, #syncComponents, #syncGlobalDatasources').on('change', handleSyncOptionLogic);
       $(document).ready(handleSyncOptionLogic);

    // -------------------
    // Handle template load
    // -------------------
    $('#getFieldsBtn').on('click', function () {
        const parentPath = $('input[name="itemPath"]').val().trim();
        if (!parentPath) {
            alert("Please enter a valid parent path.");
            return;
        }

        $.ajax({
            url: '@Url.Action("GetTemplatesUnderPath", "ContentMigration")',
            type: 'POST',
            data: { parentPath },
            success: function (templates) {
                if (!templates || templates.length === 0) {
                    $('#templateSelectorContainer').hide();
                    $('#templateFieldsContainer').html('<p class="text-danger">No templates found under this path.</p>');
                    return;
                }

                templateMap = {};
                templateFieldsMap = {};
                const $select = $('#templateSelector').empty();

                // Sort templates alphabetically by TemplateName
                templates.sort((a, b) => a.TemplateName.localeCompare(b.TemplateName));

                templates.forEach(t => {
                    // Sort fields alphabetically by Name before storing
                    const sortedFields = (t.Fields || []).sort((a, b) => a.Name.localeCompare(b.Name));

                    templateMap[t.TemplateId] = t.TemplateName;
                    templateFieldsMap[t.TemplateId] = sortedFields;
                    $select.append(`<option value="${t.TemplateId}">${t.TemplateName}</option>`);
                });

                $('#templateSelectorContainer').show();
                $select.select2({ placeholder: 'Select templates...', width: 'resolve' }).trigger('change');
            },
            error: function () {
                $('#templateFieldsContainer').html('<p class="text-danger">Error loading templates.</p>');
            }
        });
    });

    // -------------------
    // Render table UI
    // -------------------
    $('#templateSelector').on('change', function () {
        const selectedTemplates = $(this).val();
        const $container = $('#templateFieldsContainer').empty();
        if (!selectedTemplates || selectedTemplates.length === 0) return;

        selectedTemplates.forEach(templateId => {
            const templateName = templateMap[templateId];
            const fields = templateFieldsMap[templateId] || [];

            const $section = $('<div class="mb-4 p-3 bg-light border rounded"></div>');
            $section.append(`<label class="form-label fw-bold">${templateName} <span class="text-muted">Map to XMC Template</span></label>`);

            // XMC Template selector
            const $xmSelect = $(`<select class="form-select mb-2 xm-template-dropdown" data-xptemplateid="${templateId}"></select>`);
            $xmSelect.append(`<option value="">-- Select XMC Template --</option>`);
            xmcTemplates.forEach(xm => $xmSelect.append(`<option value="${xm.id}">${xm.name}</option>`));
            $section.append($xmSelect);

            // Table for XP fields
            const $table = $(`
                <table class="table table-sm table-bordered mt-2">
                    <thead>
                        <tr>
                            <th style="width:50px;"><input type="checkbox" class="select-all-fields"></th>
                            <th>XP Field</th>
                            <th>XMC Field</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            `);

            fields.forEach(field => {
                const $row = $('<tr></tr>');
                // Checkbox checked by default
                $row.append(`<td><input type="checkbox" class="xp-field-checkbox" checked data-fieldname="${field.Name}" data-fieldtype="${field.Type}" style="transform: scale(1.3);"></td>`);
                $row.append(`<td>${field.Name} (${field.Type})</td>`);
                $row.append(`<td><select class="form-select xm-field-select"><option value="">-- Select XMC Field --</option></select></td>`);
                $table.find('tbody').append($row);
            });

            $section.append($table);
            $container.append($section);

            // Select All handler
            $table.find('.select-all-fields').on('change', function () {
                const isChecked = $(this).is(':checked');
                $table.find('.xp-field-checkbox').prop('checked', isChecked);
            });

            // Populate XMC fields when template changes
            $xmSelect.on('change', function () {
                const xmTemplateId = $(this).val();
                const xmTemplate = xmcTemplates.find(x => x.id === xmTemplateId);
                $table.find('.xm-field-select').each(function () {
                    $(this).empty().append('<option value="">-- Select XMC Field --</option>');
                    if (xmTemplate) {
                        xmTemplate.fields.forEach(f => $(this).append(`<option value="${f}">${f}</option>`));
                    }
                });
            });
        });
    });

    // -------------------
    // Submit logic
    // -------------------
    $('form').on('submit', function (e) {
        e.preventDefault();

        const $btn = $('#startSyncBtn');
        const $spinner = $('#syncSpinner');
        const $btnText = $('#syncBtnText');

        $btn.prop('disabled', true);
        $spinner.removeClass('d-none');
        $btnText.text('Syncing...');
        const selectedFieldData = [];
        $('#templateFieldsContainer > div').each(function () {
            const $section = $(this);
            const templateId = $section.find('.xm-template-dropdown').data('xptemplateid');
            const xmTemplateId = $section.find('.xm-template-dropdown').val();
            const mappings = [];            

            const $checkedBoxes = $section.find('.xp-field-checkbox:checked');

            if ($checkedBoxes.length > 0) {
                $checkedBoxes.each(function () {
                    const xpName = $(this).data('fieldname') || null;
                    const xpType = $(this).data('fieldtype') || null;
                    const xmField = $(this).closest('tr').find('.xm-field-select').val() || null;

                    if (xpName && xpType && xmField) {
                        mappings.push({ XPField: xpName, XPType: xpType, XMField: xmField });
                    }
                });
            }

            selectedFieldData.push({
                TemplateId: templateId,
                XMTemplateId: xmTemplateId,
                FieldMappings: mappings
            });
        });

        $('#mappingSelections').val(JSON.stringify(selectedFieldData));

        $.ajax({
            url: '@Url.Action("SyncContent", "ContentMigration")',
            type: 'POST',
            data: {
                itemPath: $('input[name="itemPath"]').val().trim(),
                xmcItemPath: $('input[name="xmcItemPath"]').val().trim(),
                workflowState: $('#workflowState').val(),
                language: $('#language').val(),
                createPages: $('#createPages').is(':checked'),
                syncComponents: $('#syncComponents').is(':checked'),
                syncDatasources: $('#syncGlobalDatasources').is(':checked'),
                datasourceType: $('#datasourceType').val(),
                mappingSelections: selectedFieldData,
                environment: $('#environment').val(),
            },
            success: function (response) {
                if (!response || response.length === 0) {
                    $('#syncResultContainer').html('<p class="text-warning">No sync results returned.</p>');
                    return;
                }
                let html = '<div class="mt-3"><h5>Sync Results:</h5><ul class="list-group">';
                response.forEach(item => {
                    html += `<li class="list-group-item">
                        <strong>${item.SyncedItemPath}</strong><br>
                        Status: ${item.Success ? '<span class="text-success">Success</span>' : '<span class="text-danger">Failed</span>'}
                        ${item.Message ? `<br><em>${item.Message}</em>` : ''}
                        ${item.Errors && item.Errors.length ? '<br><strong>Errors:</strong><ul>' + item.Errors.map(e => `<li>${e}</li>`).join('') + '</ul>' : ''}
                    </li>`;
                });
                html += '</ul></div>';
                $('#syncResultContainer').html(html);
            },
            error: function () {
                $('#syncResultContainer').html('<p class="text-danger">Error syncing content.</p>');
            },
            complete: function () {
                $btn.prop('disabled', false);
                $spinner.addClass('d-none');
                $btnText.text('Start Sync');
            }
        });
    });

});

</script>